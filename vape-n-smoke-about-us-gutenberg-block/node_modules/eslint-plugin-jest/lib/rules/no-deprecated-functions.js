"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _experimentalUtils = require("@typescript-eslint/experimental-utils");

var _utils = require("./utils");

var _default = (0, _utils.createRule)({
  name: __filename,
  meta: {
    docs: {
      category: 'Best Practices',
      description: 'Disallow use of deprecated functions',
      recommended: false
    },
    messages: {
      deprecatedFunction: '`{{ deprecation }}` has been deprecated in favor of `{{ replacement }}`'
    },
    type: 'suggestion',
    schema: [],
    fixable: 'code'
  },
  defaultOptions: [],

  create(context) {
    const deprecations = {
      'require.requireMock': 'jest.requireMock',
      'require.requireActual': 'jest.requireActual',
      'jest.addMatchers': 'expect.extend',
      'jest.resetModuleRegistry': 'jest.resetModules',
      'jest.runTimersToTime': 'jest.advanceTimersByTime',
      'jest.genMockFromModule': 'jest.createMockFromModule'
    };
    return {
      CallExpression(node) {
        if (node.callee.type !== _experimentalUtils.AST_NODE_TYPES.MemberExpression) {
          return;
        }

        const deprecation = (0, _utils.getNodeName)(node);

        if (!deprecation || !(deprecation in deprecations)) {
          return;
        }

        const replacement = deprecations[deprecation];
        const {
          callee
        } = node;
        context.report({
          messageId: 'deprecatedFunction',
          data: {
            deprecation,
            replacement
          },
          node,

          fix(fixer) {
            let [name, func] = replacement.split('.');

            if (callee.property.type === _experimentalUtils.AST_NODE_TYPES.Literal) {
              func = `'${func}'`;
            }

            return [fixer.replaceText(callee.object, name), fixer.replaceText(callee.property, func)];
          }

        });
      }

    };
  }

});

exports.default = _default;